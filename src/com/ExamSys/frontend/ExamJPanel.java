package com.ExamSys.frontend;


import com.ExamSys.backend.Exam;
import com.ExamSys.backend.Problem;
import com.ExamSys.backend.ProblemScore;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author zhuan
 */
public class ExamJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ExamJPanel
     */
    public ExamJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jTextFieldDescription = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxDuration = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListProblems = new javax.swing.JList<>();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonNew = new javax.swing.JButton();
        jButtonAddProblem = new javax.swing.JButton();
        jButtonDeleteProblem = new javax.swing.JButton();

        jLabel1.setText("ID ");

        jLabel2.setText("Description");

        jTextFieldID.setToolTipText("");
        jTextFieldID.setEnabled(false);

        jLabel3.setText("Duration");

        jComboBoxDuration.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "20 min", "30 min", "40 min", "1 hr.", "1.5 hr.", "2 hr.", "2.5 hr.", "3 hr." }));

        jScrollPane1.setViewportView(jListProblems);

        jButtonUpdate.setText("Update");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonNew.setText("New");
        jButtonNew.setToolTipText("");
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jButtonAddProblem.setText("Add Problem");
        jButtonAddProblem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddProblemActionPerformed(evt);
            }
        });

        jButtonDeleteProblem.setText("Delete Problem");
        jButtonDeleteProblem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteProblemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldDescription)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonNew))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonAddProblem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonDeleteProblem)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonUpdate)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonNew))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddProblem)
                    .addComponent(jButtonDeleteProblem))
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // TODO add your handling code here:
        if (this.jTextFieldDescription.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Description cannot be blank", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Exam examTmp;
        if (this.exam==null) {
            examTmp=new Exam();
        }
        else examTmp=this.exam;
        retrieveExamFromForm(examTmp,this.newProblems);
        
        
        if (this.exam!=null) {
            examTmp.update();
        }
        else {
            examTmp.create();
        }
        ((ExamsJPanel)this.getParent().getParent()).reload();
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        this.exam.remove();
        ((ExamsJPanel)this.getParent().getParent()).reload();
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        // TODO add your handling code here:
        this.clear();
        this.jButtonUpdate.setText("Add");
        this.setReadonly(false);
        this.exam=null;
        this.newProblems.clear();
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonDeleteProblemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteProblemActionPerformed
        // TODO add your handling code here:
        int idx=this.jListProblems.getSelectedIndex();
        if (idx>=0) {
            ((DefaultListModel)this.jListProblems.getModel()).remove(idx);
            this.newProblems.remove(idx);
        }
    }//GEN-LAST:event_jButtonDeleteProblemActionPerformed

    private void jButtonAddProblemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddProblemActionPerformed
        // TODO add your handling code here:
        ExamAddProblemJDialog dialog=new ExamAddProblemJDialog(Global.mainFrame,true);
        ProblemScore selectedProblem=dialog.showDialog();
        if (selectedProblem!=null) {
            ((DefaultListModel)this.jListProblems.getModel()).addElement(selectedProblem.toString());
            this.newProblems.add(selectedProblem);
        }
    }//GEN-LAST:event_jButtonAddProblemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddProblem;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDeleteProblem;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox<String> jComboBoxDuration;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jListProblems;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldID;
    // End of variables declaration//GEN-END:variables
    private Exam exam=null;
    List<ProblemScore> newProblems=new ArrayList();
    
    public void setExam(Exam ex) {
        if (ex==null) {
            this.exam=null;
            this.setReadonly(true);
            this.clear();
            return;
        }
        this.exam=ex;
        this.newProblems.clear();
        this.newProblems.addAll(this.exam.getProblems());
        this.jButtonUpdate.setText("Update");
        
        this.jTextFieldID.setText(""+exam.getID());
        this.jTextFieldDescription.setText(exam.getDescription());
        this.jComboBoxDuration.setSelectedIndex(convertDurationToSelectionIndex(exam.getTimeLimit()));
        List<ProblemScore> problems=exam.getProblems();
        DefaultListModel listModel=new DefaultListModel();
        problems.forEach((problem)->{
            listModel.addElement(problem);
        });
        this.jListProblems.setModel(listModel);
        
        this.setReadonly(this.exam.isReadOnly());
    }

    private int convertDurationToSelectionIndex(Duration timeLimit) {
        if (timeLimit.getSeconds()<=20*60) return 0;
        if (timeLimit.getSeconds()<=30*60) return 1;
        if (timeLimit.getSeconds()<=40*60) return 2;
        if (timeLimit.getSeconds()<=60*60) return 3;
        if (timeLimit.getSeconds()<=1.5*60*60) return 4;
        if (timeLimit.getSeconds()<=2*60*60) return 5;
        if (timeLimit.getSeconds()<=2.5*60*60) return 6;
        return 7;
    }

    private void retrieveExamFromForm(Exam e,List<ProblemScore> ps) {
        e.setDescription(this.jTextFieldDescription.getText());
        e.setTimeLimit(convertSelectionIndexToDuration());
        e.getProblems().clear();
        e.getProblems().addAll(ps);
    }

    private Duration convertSelectionIndexToDuration() {
        switch (this.jComboBoxDuration.getSelectedIndex()) {
            case 0: return Duration.ofMinutes(20);
            case 1: return Duration.ofMinutes(30);
            case 2: return Duration.ofMinutes(40);
            case 3: return Duration.ofHours(1);
            case 4: return Duration.ofMinutes(90);
            case 5: return Duration.ofHours(2);
            case 6: return Duration.ofMinutes(150);
            case 7: return Duration.ofHours(3);
            default: return Duration.ofHours(1);
        }
    }

    private void clear() {
        this.jTextFieldID.setText("");
        this.jTextFieldDescription.setText("");
        this.jComboBoxDuration.setSelectedIndex(3);
        this.jListProblems.setModel(new DefaultListModel());
        this.newProblems.clear();
        this.exam=null;
    }

    private void setReadonly(boolean b) {
        this.jTextFieldDescription.setEnabled(!b);
        this.jComboBoxDuration.setEnabled(!b);
        this.jButtonUpdate.setEnabled(!b);
        this.jButtonDelete.setEnabled(!b);
        this.jButtonNew.setEnabled(true);
        this.jListProblems.setEnabled(!b);
        this.jButtonAddProblem.setEnabled(!b);
        this.jButtonDeleteProblem.setEnabled(!b);
    }
}
