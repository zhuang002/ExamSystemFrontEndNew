/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ExamSys.frontend;

import com.ExamSys.backend.Exam;
import com.ExamSys.backend.Problem;
import com.ExamSys.backend.ProblemScore;
import com.ExamSys.backend.ProblemSection;
import com.ExamSys.backend.Report;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

/**
 * The taking exam wizard view for an exam.
 * @author Andy
 */
public class ExamWizardJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ExamWizardJPanel
     */
    public ExamWizardJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaProblem = new javax.swing.JTextArea();
        jCheckBoxB = new javax.swing.JCheckBox();
        jCheckBoxA = new javax.swing.JCheckBox();
        jCheckBoxC = new javax.swing.JCheckBox();
        jCheckBoxD = new javax.swing.JCheckBox();
        jButtonPrevious = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jButtonSubmit = new javax.swing.JButton();

        jTextAreaProblem.setColumns(20);
        jTextAreaProblem.setRows(5);
        jTextAreaProblem.setEnabled(false);
        jScrollPane1.setViewportView(jTextAreaProblem);

        jCheckBoxB.setText("B");
        jCheckBoxB.setToolTipText("");
        jCheckBoxB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxBActionPerformed(evt);
            }
        });

        jCheckBoxA.setText("A");
        jCheckBoxA.setToolTipText("");
        jCheckBoxA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAActionPerformed(evt);
            }
        });

        jCheckBoxC.setText("C");
        jCheckBoxC.setToolTipText("");
        jCheckBoxC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCActionPerformed(evt);
            }
        });

        jCheckBoxD.setText("D");
        jCheckBoxD.setToolTipText("");
        jCheckBoxD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDActionPerformed(evt);
            }
        });

        jButtonPrevious.setText("<<");
        jButtonPrevious.setToolTipText("");
        jButtonPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreviousActionPerformed(evt);
            }
        });

        jButtonNext.setText(">>");
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        jButtonSubmit.setText("Submit");
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonPrevious)
                        .addGap(46, 46, 46)
                        .addComponent(jCheckBoxA)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonSubmit)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxB)
                                .addGap(16, 16, 16)
                                .addComponent(jCheckBoxC)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxD)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                                .addComponent(jButtonNext)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxB)
                    .addComponent(jCheckBoxA)
                    .addComponent(jCheckBoxC)
                    .addComponent(jCheckBoxD)
                    .addComponent(jButtonPrevious)
                    .addComponent(jButtonNext))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSubmit)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The event handler when a checkbox for an answer is clicked.
     * @param evt The event object.
     */
    private void jCheckBoxAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAActionPerformed
        // TODO add your handling code here:
        this.jCheckBoxB.setSelected(false);
        this.jCheckBoxC.setSelected(false);
        this.jCheckBoxD.setSelected(false);
    }//GEN-LAST:event_jCheckBoxAActionPerformed

    private void jCheckBoxBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxBActionPerformed
        // TODO add your handling code here:
        this.jCheckBoxA.setSelected(false);
        this.jCheckBoxC.setSelected(false);
        this.jCheckBoxD.setSelected(false);
    }//GEN-LAST:event_jCheckBoxBActionPerformed

    private void jCheckBoxCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCActionPerformed
        // TODO add your handling code here:
        this.jCheckBoxA.setSelected(false);
        this.jCheckBoxB.setSelected(false);
        this.jCheckBoxD.setSelected(false);
    }//GEN-LAST:event_jCheckBoxCActionPerformed

    private void jCheckBoxDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDActionPerformed
        // TODO add your handling code here:
        this.jCheckBoxA.setSelected(false);
        this.jCheckBoxB.setSelected(false);
        this.jCheckBoxC.setSelected(false);
    }//GEN-LAST:event_jCheckBoxDActionPerformed

    private void jButtonPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreviousActionPerformed
        // TODO add your handling code here:
        this.answers[this.currentPage]=this.getCurrentAnswer();
        this.currentPage--;
        this.setCurrentPage();
    }//GEN-LAST:event_jButtonPreviousActionPerformed

    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        // TODO add your handling code here:
        this.answers[this.currentPage]=this.getCurrentAnswer();
        this.currentPage++;
        this.setCurrentPage();
    }//GEN-LAST:event_jButtonNextActionPerformed

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        // TODO add your handling code here:
        this.answers[this.currentPage]=this.getCurrentAnswer();
        Report report=createReport();
        report.create();
        //TakeExamJDialog dlg=((TakeExamJDialog)this.getRootPane().getParent());
        ((ExamSystemFrame)Global.mainFrame).reloadReport();
        ReportJPanel reportPanel=(ReportJPanel)this.getParent().getComponent(2);
        reportPanel.setReport(report);
        ((CardLayout)this.getParent().getLayout()).show(this.getParent(), "Report");
    }//GEN-LAST:event_jButtonSubmitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPrevious;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JCheckBox jCheckBoxA;
    private javax.swing.JCheckBox jCheckBoxB;
    private javax.swing.JCheckBox jCheckBoxC;
    private javax.swing.JCheckBox jCheckBoxD;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaProblem;
    // End of variables declaration//GEN-END:variables

    private Exam exam = null;
    private int currentPage = 0;
    private int[] answers;

    /**
     * relate the wizard view with an exam.
     * @param ex The exam object.
     */
    void setExam(Exam ex) {
        if (ex==null) {
            this.clear();
            this.setReadonly(true);
        }
        this.exam = ex;
        this.answers=new int[ex.getProblems().size()];
        for (int i=0;i<this.answers.length;i++)
            this.answers[i]=0;
        setCurrentPage();
    }

    /**
     * Set contents for current problem.
     */
    private void setCurrentPage() {
        if (this.exam.getProblems().isEmpty()) {
            this.clear();
            this.setReadonly(true);
            return;
        }
        this.setReadonly(false);
        String text = "";
        Problem problem = exam.getProblems().get(this.currentPage).getProblem();
        for (ProblemSection section : problem.getSections()) {
            text += section.getText() + "\r\n";
        }
        this.jTextAreaProblem.setText(text);
        this.setCurrentAnswer(this.answers[this.currentPage]);
        this.jButtonPrevious.setEnabled(this.currentPage != 0);
        this.jButtonNext.setEnabled(this.currentPage != this.exam.getProblems().size() - 1);
    }

    /**
     * Clear the view content.
     */
    private void clear() {
        this.exam=null;
        this.currentPage=0;
        this.answers=null;
        this.jTextAreaProblem.setText("");
        this.clearAnswers();
    }

    /**
     * Make the view readOnly.
     * @param b If true, the view will be read only, else editable.
     */
    private void setReadonly(boolean b) {
        this.jButtonNext.setEnabled(!b);
        this.jButtonPrevious.setEnabled(!b);
        this.jButtonSubmit.setEnabled(!b);
        this.jCheckBoxA.setEnabled(!b);
        this.jCheckBoxB.setEnabled(!b);
        this.jCheckBoxC.setEnabled(!b);
        this.jCheckBoxD.setEnabled(!b);
    }

    /**
     * Auto generate a report.
     * @return The report generated. 
     */
    private Report createReport() {
        if (this.exam==null) return null;
        Report report=new Report();
        report.setDate(new Date());
        report.setExam(exam);
        report.setStudent(Global.currentUser);
        List<int[]> scoreList=report.getScoreList();
        List<ProblemScore> problemScores=this.exam.getProblems();
        for (int i=0;i<this.answers.length;i++) {
            int[] sa=new int[2];

            if (this.answers[i]==0) {
                sa[0]=0;
                sa[1]=-1;
            }
            else {
                sa[1]='A'+this.answers[i]-1;
                if (sa[1]==problemScores.get(i).getProblem().getAnswer()) {
                    sa[0]=problemScores.get(i).getScore();
                } else {
                    sa[0]=0;
                }
                scoreList.add(sa);
            }
        }
        return report;
    }

    /**
     * Get the user input answer from the UI for the current problem.
     * @return the id of the user input answers. 1 for A, 2 for B, 3 for C, 4 for D and 0 for no answer.
     */
    private int getCurrentAnswer() {
        if (this.jCheckBoxA.isSelected()) return 1;
        else if (this.jCheckBoxB.isSelected()) return 2;
        else if (this.jCheckBoxC.isSelected()) return 3;
        else if (this.jCheckBoxD.isSelected()) return 4;
        else return 0;
    }

    /**
     * Modify the checkboxes with an answer
     * @param answer 
     */
    private void setCurrentAnswer(int answer) {
        this.clearAnswers();
        switch(answer) {
            case 1: this.jCheckBoxA.setSelected(true);
                break;
            case 2: this.jCheckBoxB.setSelected(true);
                break;
            case 3: this.jCheckBoxC.setSelected(true);
                break;
            case 4: this.jCheckBoxD.setSelected(true);
                break;
            default:
                break;
        }
    }

    /**
     * Clear all the checkboxes.
     */
    private void clearAnswers() {
        this.jCheckBoxA.setSelected(false);
        this.jCheckBoxB.setSelected(false);
        this.jCheckBoxC.setSelected(false);
        this.jCheckBoxD.setSelected(false);
    }
}
